"""
Ng∆∞·ªùi 2 - Ph√¢n t√≠ch & Th·ªëng k√™
ƒê·∫øm s·ªë l∆∞·ª£ng hi·ªáu thu·ªëc theo qu·∫≠n/huy·ªán v√† v·∫Ω bi·ªÉu ƒë·ªì
"""

import json
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
from pathlib import Path
from collections import Counter

# Thi·∫øt l·∫≠p font h·ªó tr·ª£ ti·∫øng Vi·ªát
matplotlib.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['axes.unicode_minus'] = False

# ƒê∆∞·ªùng d·∫´n file
DATA_FILE = Path(__file__).parent.parent / "data" / "clean_pharmacy.geojson"
OUTPUT_CSV = Path(__file__).parent.parent / "results" / "pharmacy_by_district.csv"
OUTPUT_CHART = Path(__file__).parent.parent / "results" / "chart_district.png"


def load_pharmacy_data():
    """ƒê·ªçc d·ªØ li·ªáu t·ª´ file clean_pharmacy.geojson"""
    print("üîÑ ƒêang ƒë·ªçc d·ªØ li·ªáu hi·ªáu thu·ªëc...")
    
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    pharmacies = []
    for feature in data['features']:
        props = feature['properties']
        pharmacies.append({
            'name': props.get('name', 'Kh√¥ng r√µ t√™n'),
            'district': props.get('district'),
            'street': props.get('street', ''),
            'opening_hours': props.get('opening_hours', ''),
            'coordinates': feature['geometry']['coordinates']
        })
    
    return pd.DataFrame(pharmacies)


def analyze_by_district(df):
    """Ph√¢n t√≠ch s·ªë l∆∞·ª£ng hi·ªáu thu·ªëc theo qu·∫≠n/huy·ªán"""
    print("\nüìä ƒêang th·ªëng k√™ theo qu·∫≠n/huy·ªán...")
    
    # ƒê·∫øm s·ªë l∆∞·ª£ng theo qu·∫≠n
    district_counts = df['district'].value_counts()
    
    # T·∫°o DataFrame ƒë·ªÉ l∆∞u
    analysis_df = pd.DataFrame({
        'Qu·∫≠n/Huy·ªán': district_counts.index,
        'S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc': district_counts.values,
        'T·ª∑ l·ªá (%)': (district_counts.values / district_counts.sum() * 100).round(2)
    })
    
    # L∆∞u ra CSV
    analysis_df.to_csv(OUTPUT_CSV, index=False, encoding='utf-8-sig')
    print(f"‚úÖ ƒê√£ l∆∞u file CSV: {OUTPUT_CSV}")
    
    # In ra th·ªëng k√™
    print("\n" + "="*60)
    print("TH·ªêNG K√ä HI·ªÜU THU·ªêC THEO QU·∫¨N/HUY·ªÜN")
    print("="*60)
    print(analysis_df.to_string(index=False))
    
    # T√¨m qu·∫≠n c√≥ nhi·ªÅu/√≠t nh·∫•t
    max_district = district_counts.idxmax()
    max_count = district_counts.max()
    min_district = district_counts.idxmin()
    min_count = district_counts.min()
    
    print("\n" + "="*60)
    print("PH√ÇN T√çCH")
    print("="*60)
    print(f"üèÜ Qu·∫≠n c√≥ NHI·ªÄU hi·ªáu thu·ªëc nh·∫•t: {max_district} ({max_count} hi·ªáu thu·ªëc)")
    print(f"üìâ Qu·∫≠n c√≥ √çT hi·ªáu thu·ªëc nh·∫•t: {min_district} ({min_count} hi·ªáu thu·ªëc)")
    print(f"üìä T·ªïng s·ªë hi·ªáu thu·ªëc: {district_counts.sum()}")
    print(f"üìç S·ªë qu·∫≠n/huy·ªán c√≥ hi·ªáu thu·ªëc: {len(district_counts)}")
    print(f"üìà Trung b√¨nh: {district_counts.mean():.1f} hi·ªáu thu·ªëc/qu·∫≠n")
    
    return analysis_df


def plot_charts(analysis_df):
    """V·∫Ω c√°c bi·ªÉu ƒë·ªì th·ªëng k√™"""
    print("\nüé® ƒêang v·∫Ω bi·ªÉu ƒë·ªì...")
    
    # S·∫Øp x·∫øp d·ªØ li·ªáu theo s·ªë l∆∞·ª£ng gi·∫£m d·∫ßn
    sorted_df = analysis_df.sort_values('S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc', ascending=False)
    
    # ƒê∆∞·ªùng d·∫´n cho c√°c bi·ªÉu ƒë·ªì ri√™ng
    output_dir = Path(__file__).parent.parent / "results"
    chart_bar = output_dir / "chart_bar.png"
    chart_pie = output_dir / "chart_pie.png"
    chart_horizontal = output_dir / "chart_horizontal.png"
    
    # 1. Bi·ªÉu ƒë·ªì c·ªôt (ri√™ng)
    print("  üìä ƒêang v·∫Ω bi·ªÉu ƒë·ªì c·ªôt...")
    fig1, ax1 = plt.subplots(figsize=(12, 6))
    bars = ax1.bar(range(len(sorted_df)), sorted_df['S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc'], 
                   color='steelblue', alpha=0.8, edgecolor='navy')
    ax1.set_xlabel('Qu·∫≠n/Huy·ªán', fontsize=12, fontweight='bold')
    ax1.set_ylabel('S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc', fontsize=12, fontweight='bold')
    ax1.set_title('Bi·ªÉu ƒë·ªì c·ªôt: S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc theo qu·∫≠n/huy·ªán', 
                  fontsize=14, fontweight='bold', pad=20)
    ax1.set_xticks(range(len(sorted_df)))
    ax1.set_xticklabels(sorted_df['Qu·∫≠n/Huy·ªán'], rotation=45, ha='right', fontsize=10)
    ax1.grid(axis='y', alpha=0.3, linestyle='--')
    
    # Th√™m gi√° tr·ªã l√™n ƒë·ªânh c·ªôt
    for i, bar in enumerate(bars):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height,
                f'{int(height)}',
                ha='center', va='bottom', fontsize=10, fontweight='bold')
    
    plt.tight_layout()
    plt.savefig(chart_bar, dpi=300, bbox_inches='tight')
    plt.close()
    print(f"  ‚úÖ ƒê√£ l∆∞u: {chart_bar.name}")
    
    # 2. Bi·ªÉu ƒë·ªì tr√≤n (ri√™ng)
    print("  üç∞ ƒêang v·∫Ω bi·ªÉu ƒë·ªì tr√≤n...")
    fig2, ax2 = plt.subplots(figsize=(10, 8))
    top_n = 10
    if len(sorted_df) > top_n:
        top_districts = sorted_df.head(top_n)
        others_sum = sorted_df.iloc[top_n:]['S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc'].sum()
        
        pie_labels = list(top_districts['Qu·∫≠n/Huy·ªán']) + ['C√°c qu·∫≠n kh√°c']
        pie_values = list(top_districts['S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc']) + [others_sum]
    else:
        pie_labels = list(sorted_df['Qu·∫≠n/Huy·ªán'])
        pie_values = list(sorted_df['S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc'])
    
    colors = plt.cm.Set3(range(len(pie_values)))
    wedges, texts, autotexts = ax2.pie(pie_values, labels=pie_labels, autopct='%1.1f%%',
                                        startangle=90, colors=colors,
                                        textprops={'fontsize': 11})
    ax2.set_title('Bi·ªÉu ƒë·ªì tr√≤n: T·ª∑ l·ªá ph√¢n b·ªë hi·ªáu thu·ªëc', 
                  fontsize=14, fontweight='bold', pad=20)
    
    plt.tight_layout()
    plt.savefig(chart_pie, dpi=300, bbox_inches='tight')
    plt.close()
    print(f"  ‚úÖ ƒê√£ l∆∞u: {chart_pie.name}")
    
    # 3. Bi·ªÉu ƒë·ªì ngang (ri√™ng)
    print("  üìä ƒêang v·∫Ω bi·ªÉu ƒë·ªì ngang...")
    fig3, ax3 = plt.subplots(figsize=(10, 8))
    top_15 = sorted_df.head(15)
    y_pos = range(len(top_15))
    bars = ax3.barh(y_pos, top_15['S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc'], 
                    color='coral', alpha=0.8, edgecolor='darkred')
    ax3.set_yticks(y_pos)
    ax3.set_yticklabels(top_15['Qu·∫≠n/Huy·ªán'], fontsize=11)
    ax3.set_xlabel('S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc', fontsize=12, fontweight='bold')
    ax3.set_title('Top 15 qu·∫≠n/huy·ªán c√≥ nhi·ªÅu hi·ªáu thu·ªëc nh·∫•t', 
                  fontsize=14, fontweight='bold', pad=20)
    ax3.invert_yaxis()
    ax3.grid(axis='x', alpha=0.3, linestyle='--')
    
    # Th√™m gi√° tr·ªã
    for i, v in enumerate(top_15['S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc']):
        ax3.text(v + 0.1, i, str(int(v)), va='center', fontsize=10, fontweight='bold')
    
    plt.tight_layout()
    plt.savefig(chart_horizontal, dpi=300, bbox_inches='tight')
    plt.close()
    print(f"  ‚úÖ ƒê√£ l∆∞u: {chart_horizontal.name}")
    
    # V·∫Ω bi·ªÉu ƒë·ªì t·ªïng h·ª£p (gi·ªØ l·∫°i file g·ªëc)
    print("  üìä ƒêang v·∫Ω bi·ªÉu ƒë·ªì t·ªïng h·ª£p...")
    fig = plt.figure(figsize=(18, 6))
    
    # Subplot 1: Bi·ªÉu ƒë·ªì c·ªôt
    ax1 = plt.subplot(1, 3, 1)
    bars = ax1.bar(range(len(sorted_df)), sorted_df['S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc'], 
                   color='steelblue', alpha=0.8, edgecolor='navy')
    ax1.set_xlabel('Qu·∫≠n/Huy·ªán', fontsize=11, fontweight='bold')
    ax1.set_ylabel('S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc', fontsize=11, fontweight='bold')
    ax1.set_title('Bi·ªÉu ƒë·ªì c·ªôt: S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc theo qu·∫≠n/huy·ªán', 
                  fontsize=12, fontweight='bold', pad=15)
    ax1.set_xticks(range(len(sorted_df)))
    ax1.set_xticklabels(sorted_df['Qu·∫≠n/Huy·ªán'], rotation=45, ha='right', fontsize=9)
    ax1.grid(axis='y', alpha=0.3, linestyle='--')
    for i, bar in enumerate(bars):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height, f'{int(height)}',
                ha='center', va='bottom', fontsize=8)
    
    # Subplot 2: Bi·ªÉu ƒë·ªì tr√≤n
    ax2 = plt.subplot(1, 3, 2)
    wedges, texts, autotexts = ax2.pie(pie_values, labels=pie_labels, autopct='%1.1f%%',
                                        startangle=90, colors=colors,
                                        textprops={'fontsize': 9})
    ax2.set_title('Bi·ªÉu ƒë·ªì tr√≤n: T·ª∑ l·ªá ph√¢n b·ªë hi·ªáu thu·ªëc', 
                  fontsize=12, fontweight='bold', pad=15)
    
    # Subplot 3: Bi·ªÉu ƒë·ªì ngang
    ax3 = plt.subplot(1, 3, 3)
    ax3.barh(y_pos, top_15['S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc'], 
             color='coral', alpha=0.8, edgecolor='darkred')
    ax3.set_yticks(y_pos)
    ax3.set_yticklabels(top_15['Qu·∫≠n/Huy·ªán'], fontsize=9)
    ax3.set_xlabel('S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc', fontsize=11, fontweight='bold')
    ax3.set_title('Top 15 qu·∫≠n/huy·ªán c√≥ nhi·ªÅu hi·ªáu thu·ªëc nh·∫•t', 
                  fontsize=12, fontweight='bold', pad=15)
    ax3.invert_yaxis()
    ax3.grid(axis='x', alpha=0.3, linestyle='--')
    for i, v in enumerate(top_15['S·ªë l∆∞·ª£ng hi·ªáu thu·ªëc']):
        ax3.text(v + 1, i, str(int(v)), va='center', fontsize=9)
    
    plt.tight_layout()
    plt.savefig(OUTPUT_CHART, dpi=300, bbox_inches='tight')
    plt.close()
    print(f"  ‚úÖ ƒê√£ l∆∞u bi·ªÉu ƒë·ªì t·ªïng h·ª£p: {OUTPUT_CHART.name}")
    
    print("\nüéâ Ho√†n th√†nh! ƒê√£ t·∫°o 4 file bi·ªÉu ƒë·ªì:")
    print(f"   1. {chart_bar.name} - Bi·ªÉu ƒë·ªì c·ªôt")
    print(f"   2. {chart_pie.name} - Bi·ªÉu ƒë·ªì tr√≤n")
    print(f"   3. {chart_horizontal.name} - Bi·ªÉu ƒë·ªì ngang")
    print(f"   4. {OUTPUT_CHART.name} - Bi·ªÉu ƒë·ªì t·ªïng h·ª£p")


def main():
    """H√†m ch√≠nh"""
    print("="*60)
    print("PH√ÇN T√çCH & TH·ªêNG K√ä HI·ªÜU THU·ªêC H√Ä N·ªòI")
    print("="*60)
    
    # ƒê·ªçc d·ªØ li·ªáu
    df = load_pharmacy_data()
    
    # Ph√¢n t√≠ch theo qu·∫≠n
    analysis_df = analyze_by_district(df)
    
    # V·∫Ω bi·ªÉu ƒë·ªì
    plot_charts(analysis_df)
    
    print("\n‚úÖ Ho√†n th√†nh ph√¢n t√≠ch!")


if __name__ == "__main__":
    main()
